# Supreme System V5 - Environment Configuration
# Copy this file to .env and fill in your actual values

# ============================================
# DATA FABRIC - FREE API KEYS (Highly Recommended)
# ============================================

# CoinGecko API Key (Free tier: 10-30 calls/min, 99.9% uptime)
# Get from: https://www.coingecko.com/en/api
COINGECKO_API_KEY=your_coingecko_api_key_here

# CoinMarketCap API Key (Free tier: 10,000 calls/month)
# Get from: https://coinmarketcap.com/api/
CMC_API_KEY=your_coinmarketcap_api_key_here

# CryptoCompare API Key (Free tier: 100,000 calls/month)
# Get from: https://min-api.cryptocompare.com/
CRYPTOCOMPARE_API_KEY=your_cryptocompare_api_key_here

# Alpha Vantage API Key (Free tier: 5 calls/min, 500 calls/day)
# Get from: https://www.alphavantage.co/support/#api-key
ALPHA_VANTAGE_API_KEY=your_alpha_vantage_api_key_here

# Yahoo Finance API Key (Optional - for traditional markets)
# Get from: https://developer.yahoo.com/apps/
YAHOO_FINANCE_API_KEY=your_yahoo_finance_api_key_here

# ============================================
# EXCHANGE API KEYS (For Live Trading)
# ============================================

# OKX Exchange (Primary Exchange)
# Get from: https://www.okx.com/account/my-api
OKX_API_KEY=your_okx_api_key_here
OKX_SECRET_KEY=your_okx_secret_key_here
OKX_PASSPHRASE=your_okx_passphrase_here

# Binance Exchange (Backup Exchange)
# Get from: https://www.binance.com/en/my/settings/api-management
BINANCE_API_KEY=your_binance_api_key_here
BINANCE_SECRET_KEY=your_binance_secret_key_here

# ============================================
# DATABASE CONFIGURATION
# ============================================

# Redis Configuration (High-speed caching)
REDIS_URL=redis://localhost:6379/0
REDIS_PASSWORD=your_redis_password_here

# PostgreSQL Configuration (Trade history & analytics)
DATABASE_URL=postgresql://postgres:supreme_password@localhost:5432/supreme_trading

# ============================================
# SYSTEM CONFIGURATION
# ============================================

# Environment Settings
ENVIRONMENT=production
LOG_LEVEL=INFO
DEBUG=false

# JWT Configuration (For API authentication)
JWT_SECRET_KEY=your_jwt_secret_key_here
JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30

# ============================================
# MONITORING & METRICS
# ============================================

# Prometheus Configuration
PROMETHEUS_PORT=9090
METRICS_ENABLED=true

# Grafana Configuration
GRAFANA_ADMIN_PASSWORD=supreme_admin

# ============================================
# TRADING CONFIGURATION
# ============================================

# Trading Mode
# Options: sandbox, live
TRADING_MODE=sandbox

# Trading Symbols (Comma-separated)
TRADING_SYMBOLS=BTC-USDT,ETH-USDT,BNB-USDT,XRP-USDT,ADA-USDT,DOGE-USDT

# Position Sizing
MAX_POSITION_SIZE=0.01
MAX_POSITION_SIZE_PERCENT=2.0

# Risk Management
STOP_LOSS_PERCENT=0.5
TAKE_PROFIT_PERCENT=0.2
MAX_DRAWDOWN_PERCENT=12.0
MAX_DAILY_LOSS_USD=100.0
MAX_DAILY_LOSS_PERCENT=5.0
MAX_LEVERAGE=2.0

# Circuit Breaker
CIRCUIT_BREAKER_THRESHOLD=3
CIRCUIT_BREAKER_TIMEOUT_MINUTES=30
COOL_OFF_PERIOD_MINUTES=15

# ============================================
# STRATEGY CONFIGURATION
# ============================================

# Scalping Strategy Parameters
EMA_SHORT_PERIOD=5
EMA_MEDIUM_PERIOD=20
EMA_LONG_PERIOD=50
RSI_PERIOD=14
RSI_OVERBOUGHT=70
RSI_OVERSOLD=30
MIN_SIGNAL_STRENGTH=0.6
MAX_HOLD_TIME_MINUTES=15

# ============================================
# SYSTEM LIMITS (i3-4GB Hardware Optimized)
# ============================================

# Memory Limits
MAX_MEMORY_MB=3500
MAX_CPU_PERCENT=80

# Performance Settings
UPDATE_INTERVAL_MS=100
TARGET_LATENCY_MS=50

# ============================================
# NETWORK CONFIGURATION
# ============================================

# API Server
API_HOST=0.0.0.0
API_PORT=8000

# Web Interface
WEB_HOST=0.0.0.0
WEB_PORT=8080

# ============================================
# CONTAINER CONFIGURATION
# ============================================

# Docker Resource Limits
DOCKER_MEMORY_LIMIT=3500m
DOCKER_CPU_LIMIT=2.0

# ============================================
# BACKUP & RECOVERY
# ============================================

# Backup Settings
BACKUP_ENABLED=true
BACKUP_INTERVAL_HOURS=24
BACKUP_RETENTION_DAYS=30

# ============================================
# SECURITY SETTINGS
# ============================================

# SSL/TLS Configuration
SSL_ENABLED=true
SSL_CERT_PATH=/etc/ssl/certs/supreme.crt
SSL_KEY_PATH=/etc/ssl/private/supreme.key

# API Rate Limiting
API_RATE_LIMIT_REQUESTS_PER_MINUTE=60

# ============================================
# ADVANCED CONFIGURATION
# ============================================

# Data Quality Settings
DATA_QUALITY_ENABLED=true
DATA_FRESHNESS_MAX_SECONDS=60
DATA_RETRY_ATTEMPTS=3

# Cache Settings
CACHE_TTL_SECONDS=300
CACHE_MAX_MEMORY_ITEMS=10000

# WebSocket Settings
WS_RECONNECT_ATTEMPTS=5
WS_RECONNECT_DELAY_SECONDS=5

# ============================================
# DEVELOPMENT SETTINGS (Only for development)
# ============================================

# Mock Data (for testing without real APIs)
USE_MOCK_DATA=false
MOCK_DATA_SEED=42

# Debug Settings
ENABLE_PROFILING=false
LOG_REQUESTS=false

# ============================================
# QUICK START CONFIGURATION
# ============================================

# For immediate testing with free APIs only:
# 1. Set TRADING_MODE=sandbox
# 2. Fill in API keys above (CoinGecko, CMC, CryptoCompare, Alpha Vantage)
# 3. Leave exchange keys blank for free data mode
# 4. Run: docker-compose -f docker-compose.production.yml up -d

# For live trading:
# 1. Set TRADING_MODE=live
# 2. Fill in exchange API keys (OKX or Binance)
# 3. Ensure sufficient testnet funds for paper trading first
# 4. Start with small position sizes (MAX_POSITION_SIZE=0.001)

# ============================================
# VALIDATION CHECKLIST
# ============================================

# Before starting:
# [ ] Copy this file to .env
# [ ] Fill in at least CoinGecko and CMC API keys
# [ ] Verify Redis and PostgreSQL are running
# [ ] Test with: docker-compose -f docker-compose.production.yml config
# [ ] Start with: docker-compose -f docker-compose.production.yml up -d
