# Supreme System V5 - i3 8th Gen Optimized Docker Compose
# Ultra-lightweight configuration for i3 processors with 4GB RAM

version: '3.8'

services:
  # Main application with i3 optimizations
  supreme-system-v5:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: supreme-system-v5-i3
    ports:
      - "8000:8000"     # API server
      - "9090:9090"     # Prometheus metrics (reduced frequency)
    environment:
      - ENVIRONMENT=production
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - PROMETHEUS_PORT=9090
      - LOG_LEVEL=warning  # Reduced logging for i3
      - HARDWARE_PROFILE=i3_8th_gen
      - MEMORY_PROFILE=4gb
      
      # i3-specific optimizations
      - SINGLE_THREAD_MODE=true
      - MAX_SYMBOLS=5
      - UPDATE_FREQUENCY_MS=2000
      - AGGRESSIVE_GC=true
      - COMPRESS_DATA=true
      - REDUCED_HISTORY=true
      - MAX_HISTORY_DAYS=15
      - WEBSOCKET_BUFFER_SIZE=500
      - METRICS_RETENTION_HOURS=12
      
      # Performance limits
      - MAX_CPU_USAGE=88
      - MAX_MEMORY_GB=3.86
      - TARGET_LATENCY_MS=100
      
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./config:/app/config
    networks:
      - supreme-network
    restart: unless-stopped
    
    # Aggressive resource limits for i3
    deploy:
      resources:
        limits:
          memory: 3G        # Conservative memory limit
          cpus: '3.5'       # Leave 0.5 cores for system
        reservations:
          memory: 2G
          cpus: '2.0'
    
    # Health check with relaxed timing
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 60s       # Less frequent checks
      timeout: 15s        # Longer timeout
      retries: 2          # Fewer retries
      start_period: 60s   # Longer startup period

  # Lightweight Redis for i3
  redis:
    image: redis:7.2-alpine
    container_name: supreme-redis-i3
    ports:
      - "6379:6379"
    command: >
      redis-server 
      --appendonly yes 
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --tcp-keepalive 60
      --timeout 300
      --databases 4
    volumes:
      - redis_data_i3:/data
    networks:
      - supreme-network
    restart: unless-stopped
    
    # Minimal Redis resources
    deploy:
      resources:
        limits:
          memory: 300M
          cpus: '0.3'
        reservations:
          memory: 200M
          cpus: '0.1'
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 2

  # Lightweight Prometheus for i3
  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: supreme-prometheus-i3
    ports:
      - "9091:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=12h'    # Only 12 hours retention
      - '--storage.tsdb.retention.size=1GB'    # Max 1GB storage
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.min-block-duration=30m' # Larger blocks
      - '--storage.tsdb.max-block-duration=2h'  # Fewer files
      - '--query.max-samples=10000'            # Limit query samples
      - '--log.level=warn'                     # Less logging
    volumes:
      - ./monitoring/prometheus.i3.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data_i3:/prometheus
    networks:
      - supreme-network
    restart: unless-stopped
    
    # Reduced Prometheus resources
    deploy:
      resources:
        limits:
          memory: 500M      # Much less memory
          cpus: '0.4'
        reservations:
          memory: 300M
          cpus: '0.2'
    
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 60s
      timeout: 10s
      retries: 2

  # Optional: Ultra-lightweight Grafana (can be disabled)
  grafana:
    image: grafana/grafana:10.1.5
    container_name: supreme-grafana-i3
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-Supreme@i3!}
      - GF_SECURITY_ADMIN_USER=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_NEWS_NEWS_FEED_ENABLED=false
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/provisioning/dashboards/i3-optimized.json
    volumes:
      - grafana_data_i3:/var/lib/grafana
      - ./monitoring/grafana/dashboards-i3:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - supreme-network
    restart: unless-stopped
    
    # Minimal Grafana resources
    deploy:
      resources:
        limits:
          memory: 200M      # Very limited memory
          cpus: '0.2'
        reservations:
          memory: 100M
          cpus: '0.1'
    
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 2
    
    # Optional: Comment out this entire service to save resources
    profiles:
      - grafana  # Use: docker-compose --profile grafana up -d

# Optimized volumes for i3
volumes:
  redis_data_i3:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: size=256m,uid=999,gid=999  # Use tmpfs for speed
  prometheus_data_i3:
    driver: local
  grafana_data_i3:
    driver: local

# Optimized network for i3
networks:
  supreme-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: supreme-i3
    ipam:
      config:
        - subnet: 172.21.0.0/16

# i3-specific environment variables:
# HARDWARE_PROFILE=i3_8th_gen
# MEMORY_PROFILE=4gb  
# SINGLE_THREAD_MODE=true
# AGGRESSIVE_GC=true
# COMPRESS_DATA=true
# MAX_SYMBOLS=5
# UPDATE_FREQUENCY_MS=2000
# TARGET_LATENCY_MS=100