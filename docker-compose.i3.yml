# Supreme System V5 - i3 Optimized Environment
# Resource-constrained configuration for i3 processors with 4GB RAM

version: '3.8'

services:
  # ================================
  # SUPREME TRADING SYSTEM - I3 OPTIMIZED
  # ================================
  supreme-trading:
    build:
      context: .
      dockerfile: Dockerfile
      target: i3-optimized
      args:
        - PYTHON_VERSION=3.11
        - RUST_VERSION=1.75.0
    container_name: supreme-trading-i3
    environment:
      PYTHONPATH: /app
      TZ: UTC
      LOG_LEVEL: WARNING  # Reduced logging for i3
      ENVIRONMENT: production
      HARDWARE_PROFILE: i3_8th_gen
      MEMORY_PROFILE: 4gb
      # i3-specific optimizations
      SINGLE_THREAD_MODE: true
      MAX_SYMBOLS: 5
      UPDATE_FREQUENCY_MS: 2000
      AGGRESSIVE_GC: true
      COMPRESS_DATA: true
      REDUCED_HISTORY: true
      MAX_HISTORY_DAYS: 15
      WEBSOCKET_BUFFER_SIZE: 500
      METRICS_RETENTION_HOURS: 12
      # Performance limits
      MAX_CPU_USAGE: 88
      MAX_MEMORY_GB: 3.86
      TARGET_LATENCY_MS: 100
      # Trading limits for i3
      TRADING_MODE: ${TRADING_MODE:-sandbox}
      MAX_POSITION_SIZE: 0.005
      STOP_LOSS_PERCENT: 0.01
      TAKE_PROFIT_PERCENT: 0.005
      TRADING_SYMBOLS: ${TRADING_SYMBOLS:-BTC-USDT,ETH-USDT}
      # API Keys (optional for i3)
      OKX_API_KEY: ${OKX_API_KEY:-demo_key}
      OKX_SECRET_KEY: ${OKX_SECRET_KEY:-demo_secret}
      OKX_PASSPHRASE: ${OKX_PASSPHRASE:-demo_passphrase}
      BINANCE_API_KEY: ${BINANCE_API_KEY:-demo_key}
      BINANCE_SECRET_KEY: ${BINANCE_SECRET_KEY:-demo_secret}
      # Database (lightweight)
      REDIS_URL: redis://redis-i3:6379
      DATABASE_URL: sqlite:///app/data/supreme_i3.db
    ports:
      - "8000:8000"
      - "8080:8080"
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./config:/app/config:ro
    networks:
      - supreme-network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "2"
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]  # Minimal health check
      interval: 60s
      timeout: 15s
      retries: 2
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 3G        # Conservative memory limit for i3
          cpus: '3.5'       # Leave 0.5 cores for system
        reservations:
          memory: 2G
          cpus: '2.0'

  # ================================
  # I3 OPTIMIZED INFRASTRUCTURE
  # ================================

  # Lightweight Redis for i3
  redis-i3:
    image: redis:7-alpine
    container_name: supreme-redis-i3
    command: >
      redis-server
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --tcp-keepalive 60
      --timeout 300
      --databases 4
    ports:
      - "6379:6379"
    volumes:
      - redis_data_i3:/data
    networks:
      - supreme-network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "2"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 2
    deploy:
      resources:
        limits:
          memory: 300M
          cpus: '0.3'
        reservations:
          memory: 200M
          cpus: '0.1'

  # Minimal Prometheus for i3
  prometheus-i3:
    image: prom/prometheus:v2.47.2
    container_name: supreme-prometheus-i3
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=12h'    # Very short retention
      - '--storage.tsdb.retention.size=500MB'  # Minimal storage
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.min-block-duration=30m'
      - '--storage.tsdb.max-block-duration=2h'
      - '--query.max-samples=5000'            # Reduced samples
      - '--log.level=error'                   # Minimal logging
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.i3.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data_i3:/prometheus
    networks:
      - supreme-network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "1"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 60s
      timeout: 10s
      retries: 2
    deploy:
      resources:
        limits:
          memory: 400M      # Very limited memory
          cpus: '0.3'
        reservations:
          memory: 200M
          cpus: '0.1'

  # Optional lightweight Grafana (comment out to save resources)
  grafana-i3:
    image: grafana/grafana:10.1.5
    container_name: supreme-grafana-i3
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_I3_PASSWORD:-i3_admin}
      GF_SECURITY_ADMIN_USER: admin
      GF_USERS_ALLOW_SIGN_UP: false
      GF_ANALYTICS_REPORTING_ENABLED: false
      GF_ANALYTICS_CHECK_FOR_UPDATES: false
      GF_NEWS_NEWS_FEED_ENABLED: false
      GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH: /etc/grafana/provisioning/dashboards/i3-optimized.json
      GF_LOG_LEVEL: error
    ports:
      - "3000:3000"
    volumes:
      - grafana_data_i3:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - supreme-network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "1"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 60s
      timeout: 10s
      retries: 2
    deploy:
      resources:
        limits:
          memory: 150M      # Minimal memory usage
          cpus: '0.15'
        reservations:
          memory: 80M
          cpus: '0.05'
    # Comment out this service to disable Grafana and save resources
    profiles: ["grafana"]  # Enable with: --profile grafana

# ================================
# I3 OPTIMIZED VOLUMES
# ================================
volumes:
  redis_data_i3:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: size=256m,uid=999,gid=999  # Use tmpfs for speed
  prometheus_data_i3:
    driver: local
  grafana_data_i3:
    driver: local

# ================================
# I3 NETWORK CONFIGURATION
# ================================
networks:
  supreme-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: supreme-i3
    ipam:
      config:
        - subnet: 172.21.0.0/16

# ================================
# I3 ENVIRONMENT NOTES
# ================================
#
# Hardware Requirements:
# - Intel i3 8th Gen or equivalent
# - 4GB RAM minimum
# - SSD storage recommended
#
# Performance Optimizations:
# - Single-threaded processing
# - Reduced symbol count (5 max)
# - 2-second update intervals
# - Aggressive garbage collection
# - Data compression enabled
# - Limited history retention
#
# Memory Management:
# - 3GB container limit (3.86GB available)
# - 3.5 CPU cores allocated
# - tmpfs for Redis (faster I/O)
#
# Usage:
# docker-compose -f docker-compose.base.yml -f docker-compose.i3.yml up -d
# docker-compose -f docker-compose.base.yml -f docker-compose.i3.yml --profile grafana up -d  # With Grafana
