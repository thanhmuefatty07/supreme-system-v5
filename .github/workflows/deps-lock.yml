# Dependency management using uv as the primary tool
# Generates a fully pinned requirements.lock for reproducible builds

name: Dependency Lock
on:
  workflow_dispatch:
  push:
    paths:
      - requirements.txt
      - pyproject.toml
      - .github/workflows/deps-lock.yml

jobs:
  lock:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        run: pip install uv

      - name: Resolve & export lock file
        run: |
          # Prefer pyproject if present, otherwise fall back to requirements
          if [ -f pyproject.toml ]; then
            echo "Using pyproject.toml as the source of truth"
            uv pip compile pyproject.toml -o requirements.lock --quiet || true
          else
            echo "Using requirements.txt as the source of truth"
            uv pip compile requirements.txt -o requirements.lock --quiet || true
          fi
          # Fallback: if compile not supported, freeze current environment
          if [ ! -s requirements.lock ]; then
            echo "Generating lock from installed set (freeze)"
            pip install -r requirements.txt
            pip freeze > requirements.lock
          fi

      - name: Upload lockfile artifact
        uses: actions/upload-artifact@v4
        with:
          name: requirements-lock
          path: requirements.lock
