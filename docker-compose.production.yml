# Supreme System V5 - Production Docker Compose
# ULTRA SFL production deployment with monitoring stack

version: '3.8'

services:
  # ================================
  # SUPREME TRADING SYSTEM
  # ================================
  supreme-trading:
    build:
      context: .
      dockerfile: Dockerfile.production
      args:
        - RUST_VERSION=1.75.0
        - PYTHON_VERSION=3.11
    container_name: supreme-trading-prod
    restart: unless-stopped
    
    # Resource limits for i3-4GB systems
    mem_limit: 3500m
    mem_reservation: 2000m
    cpus: '2.0'
    
    environment:
      # Trading configuration
      - TRADING_MODE=live  # Set to 'sandbox' for testing
      - MAX_POSITION_SIZE=0.01
      - STOP_LOSS_PERCENT=0.005
      - TAKE_PROFIT_PERCENT=0.002
      - TRADING_SYMBOLS=BTC-USDT,ETH-USDT,BNB-USDT
      
      # System limits
      - MAX_MEMORY_MB=3200
      - MAX_CPU_PERCENT=80
      - UPDATE_INTERVAL_MS=100
      
      # Exchange API keys (load from .env file)
      - OKX_API_KEY=${OKX_API_KEY}
      - OKX_SECRET_KEY=${OKX_SECRET_KEY}
      - OKX_PASSPHRASE=${OKX_PASSPHRASE}
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_SECRET_KEY=${BINANCE_SECRET_KEY}
      
      # Monitoring
      - METRICS_PORT=8000
      - LOG_LEVEL=INFO
      - PROMETHEUS_ENABLED=true
      
      # Database
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://postgres:supreme_password@postgres:5432/supreme_trading
    
    ports:
      - "8000:8000"  # Metrics endpoint
      - "8080:8080"  # Web interface
    
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./config:/app/config:ro
    
    networks:
      - supreme-network
    
    depends_on:
      - redis
      - postgres
      - prometheus
    
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
  
  # ================================
  # REDIS - HIGH SPEED CACHE
  # ================================
  redis:
    image: redis:7-alpine
    container_name: supreme-redis
    restart: unless-stopped
    
    # Optimized for trading system
    command: >
      redis-server
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    
    ports:
      - "6379:6379"
    
    volumes:
      - redis-data:/data
    
    networks:
      - supreme-network
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # ================================
  # POSTGRESQL - TRADE HISTORY
  # ================================
  postgres:
    image: postgres:15-alpine
    container_name: supreme-postgres
    restart: unless-stopped
    
    environment:
      - POSTGRES_DB=supreme_trading
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=supreme_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    
    ports:
      - "5432:5432"
    
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    
    networks:
      - supreme-network
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d supreme_trading"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # ================================
  # PROMETHEUS - METRICS
  # ================================
  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: supreme-prometheus
    restart: unless-stopped
    
    ports:
      - "9090:9090"
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    
    networks:
      - supreme-network
    
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # ================================
  # GRAFANA - DASHBOARDS
  # ================================
  grafana:
    image: grafana/grafana:10.2.0
    container_name: supreme-grafana
    restart: unless-stopped
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=supreme_admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
    
    ports:
      - "3000:3000"
    
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    networks:
      - supreme-network
    
    depends_on:
      - prometheus
    
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # ================================
  # NGINX - REVERSE PROXY
  # ================================
  nginx:
    image: nginx:alpine
    container_name: supreme-nginx
    restart: unless-stopped
    
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    
    networks:
      - supreme-network
    
    depends_on:
      - supreme-trading
      - grafana
    
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# ================================
# VOLUMES
# ================================
volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# ================================
# NETWORKS
# ================================
networks:
  supreme-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
