# Supreme System V5 - Production Environment
# ULTRA SFL production deployment with security hardening

version: '3.8'

services:
  # ================================
  # SUPREME TRADING SYSTEM - PRODUCTION
  # ================================
  supreme-trading:
    build:
      context: .
      dockerfile: Dockerfile.production
      args:
        - RUST_VERSION=1.75.0
        - PYTHON_VERSION=3.11
        - BUILD_PROFILE=production
    container_name: supreme-trading-prod
    environment:
      PYTHONPATH: /app
      TZ: UTC
      LOG_LEVEL: INFO
      ENVIRONMENT: production
      TRADING_MODE: ${TRADING_MODE:-live}
      # Production security settings
      DEBUG: false
      SINGLE_THREAD_MODE: ${SINGLE_THREAD_MODE:-false}
      MAX_SYMBOLS: ${MAX_SYMBOLS:-20}
      UPDATE_FREQUENCY_MS: ${UPDATE_FREQUENCY_MS:-100}
      # Resource limits
      MAX_MEMORY_MB: ${MAX_MEMORY_MB:-3200}
      MAX_CPU_PERCENT: ${MAX_CPU_PERCENT:-80}
      # Trading configuration
      MAX_POSITION_SIZE: ${MAX_POSITION_SIZE:-0.01}
      STOP_LOSS_PERCENT: ${STOP_LOSS_PERCENT:-0.005}
      TAKE_PROFIT_PERCENT: ${TAKE_PROFIT_PERCENT:-0.002}
      TRADING_SYMBOLS: ${TRADING_SYMBOLS:-BTC-USDT,ETH-USDT}
      # API Keys (required for production)
      OKX_API_KEY: ${OKX_API_KEY}
      OKX_SECRET_KEY: ${OKX_SECRET_KEY}
      OKX_PASSPHRASE: ${OKX_PASSPHRASE}
      BINANCE_API_KEY: ${BINANCE_API_KEY}
      BINANCE_SECRET_KEY: ${BINANCE_SECRET_KEY}
      # Database
      REDIS_URL: redis://redis:6379/0
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/supreme_trading
      # Monitoring
      METRICS_PORT: 8000
      PROMETHEUS_ENABLED: true
    ports:
      - "8000:8000"  # Metrics endpoint
      - "8080:8080"  # Web interface
    volumes:
      - ./logs:/app/logs:ro  # Read-only logs
      - ./data:/app/data:ro  # Read-only data
      - ./config:/app/config:ro  # Read-only config
    networks:
      - supreme-network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 3.5G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 30s
        max_attempts: 3
        window: 120s

  # ================================
  # PRODUCTION INFRASTRUCTURE OVERRIDES
  # ================================

  # Production Redis with authentication and persistence
  redis:
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --tcp-keepalive 60
      --timeout 300
    volumes:
      - /opt/supreme-system-v5/redis:/data  # Production persistent storage
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Production PostgreSQL with optimized settings
  postgres:
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-supreme_system_v5}
      POSTGRES_USER: ${POSTGRES_USER:-supreme}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      PGDATA: /var/lib/postgresql/data/pgdata
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.7
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
    volumes:
      - /opt/supreme-system-v5/postgres:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '0.5'
        reservations:
          memory: 1G
          cpus: '0.25'

  # Production Prometheus with extended retention
  prometheus:
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=90d'
      - '--storage.tsdb.retention.size=50GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--log.level=warn'
    volumes:
      - ./monitoring/prometheus.prod.yml:/etc/prometheus/prometheus.yml:ro
      - /opt/supreme-system-v5/prometheus:/prometheus
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Production Grafana with external authentication
  grafana:
    environment:
      GF_SECURITY_ADMIN_PASSWORD_FILE: /run/secrets/grafana_password
      GF_SECURITY_ADMIN_USER: admin
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_ROOT_URL: ${GRAFANA_ROOT_URL:-https://grafana.supreme-system-v5.com/}
      GF_SERVER_SERVE_FROM_SUB_PATH: false
      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: postgres:5432
      GF_DATABASE_NAME: ${GRAFANA_DB_NAME:-grafana}
      GF_DATABASE_USER: ${GRAFANA_DB_USER:-grafana}
      GF_DATABASE_PASSWORD_FILE: /run/secrets/grafana_db_password
      GF_SESSION_PROVIDER: redis
      GF_SESSION_PROVIDER_CONFIG: addr=redis:6379,password=${REDIS_PASSWORD},db=0
      GF_SMTP_ENABLED: true
      GF_SMTP_HOST: ${SMTP_HOST}
      GF_SMTP_USER: ${SMTP_USER}
      GF_SMTP_PASSWORD_FILE: /run/secrets/smtp_password
      GF_SMTP_FROM_ADDRESS: ${SMTP_FROM_ADDRESS}
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel
    volumes:
      - /opt/supreme-system-v5/grafana:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./monitoring/grafana/ldap.toml:/etc/grafana/provisioning/ldap.toml:ro
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # ================================
  # PRODUCTION REVERSE PROXY
  # ================================
  nginx:
    image: nginx:1.25-alpine
    container_name: supreme-nginx
    ports:
      - "80:80"
      - "443:443"
    environment:
      TZ: UTC
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/ssl:ro
      - /var/log/nginx:/var/log/nginx
    depends_on:
      - supreme-trading
      - grafana
    networks:
      - supreme-network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
        reservations:
          memory: 128M
          cpus: '0.1'

# ================================
# PRODUCTION VOLUMES (External Storage)
# ================================
volumes:
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/supreme-system-v5/redis
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/supreme-system-v5/postgres
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/supreme-system-v5/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/supreme-system-v5/grafana

# ================================
# PRODUCTION SECRETS
# ================================
secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  grafana_password:
    file: ./secrets/grafana_password.txt
  grafana_db_password:
    file: ./secrets/grafana_db_password.txt
  smtp_password:
    file: ./secrets/smtp_password.txt

# ================================
# PRODUCTION NETWORKS
# ================================
networks:
  supreme-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ================================
# REQUIRED PRODUCTION ENVIRONMENT VARIABLES
# ================================
#
# Trading Configuration:
# TRADING_MODE=live|sandbox
# MAX_POSITION_SIZE=0.01
# STOP_LOSS_PERCENT=0.005
# TAKE_PROFIT_PERCENT=0.002
# TRADING_SYMBOLS=BTC-USDT,ETH-USDT,BNB-USDT
#
# API Keys (Required for live trading):
# OKX_API_KEY=your_okx_api_key
# OKX_SECRET_KEY=your_okx_secret
# OKX_PASSPHRASE=your_okx_passphrase
# BINANCE_API_KEY=your_binance_api_key
# BINANCE_SECRET_KEY=your_binance_secret
#
# Database:
# POSTGRES_DB=supreme_system_v5
# POSTGRES_USER=supreme
# POSTGRES_PASSWORD=secure_password
# REDIS_PASSWORD=secure_redis_password
#
# Monitoring:
# GRAFANA_ROOT_URL=https://grafana.yourdomain.com
# GRAFANA_DB_NAME=grafana
# GRAFANA_DB_USER=grafana
# GRAFANA_DB_PASSWORD=secure_grafana_db_password
#
# Email (Optional):
# SMTP_HOST=smtp.yourprovider.com
# SMTP_USER=your_email@domain.com
# SMTP_FROM_ADDRESS=noreply@yourdomain.com
#
# System Limits:
# MAX_SYMBOLS=20
# UPDATE_FREQUENCY_MS=100
# MAX_MEMORY_MB=3200
# MAX_CPU_PERCENT=80
